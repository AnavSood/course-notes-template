# Lecture one {#sec-lecture-one}

This page covers the material from the first lecture. 

## Quarto features 

The nice thing about writing a book in Quarto is that we have many features at our disposal. For example, we can use Quarto callout blocks to enclose our definitions. 

::: callout-note
::: {#def-prime}
# Prime numbers 
We say that a number is **prime** if it is a natural number that is not the product of two smaller natural numbers. 
:::
:::

Using Quarto's referencing, it is easy to refer back to @def-prime. When the reader hovers over this reference, a small window pops up that shows the definition. If they click on the reference, they will be navigated to where the reference originally appears. This is also true for definitions on previous or future pages. For example, even though @def-another-definition does not appear until @sec-lecture-two, the reader can still view it by hovering their cursor over the reference. Clicking on the reference will navigate them to the relevant part of @sec-lecture-two. 

When including examples, we can use a different color callout block. 

::: callout-warning
::: {#exm-prime-number}
# A prime number 

The number $5$ is a prime number. 

:::
:::

We can refer to examples like @exm-prime-number in a similar fashion. In total, there are five different colored callout blocks. Here are the other three. 

::: callout-important
# Red block title 
This is a red block 
:::

::: callout-tip
# Green block title 
This is a green block
:::

::: callout-caution
# Yellow block title 
This is a yellow block
:::

There is some customizability in how you can get these blocks to look, but not a ton. One nice thing is that they can be made collapsible, which allows for optional reading.  

::: {.callout-caution collapse="true"}
# Fun but optional fact
Except $2$ and $5$, all prime numbers end with $1$, $3$, $7$ or $9$.
:::

These blocks can also be nested. By nesting them, we can give a result along with a proof of the result. Before stating our next result, we ask you to recall @def-prime, as it has been a while since we first saw it. 


::: callout-note
::: {#lem-even-primes}
# Even primes 
If a natural number is even and prime then it must be $2$. 
:::

::: callout-tip
# Proof 

Suppose $p \in \mathbb{N}$ is prime and even. Then $p=2n$ for some $n \in \mathbb{N}$. If $n >1$ then $p$ cannot be prime because it would be larger than both  $2$ and $n$, but also equal to the product of $2$ and $n$. Therefore we must have $n=1$ and $p=2$. 

:::
:::

If a result has a harder proof than @lem-even-primes, we can collapse the proof and leave it as optional reading. 

::: callout-note
::: {#prp-infinite-primes}
# Infinite primes 
There are infinitely many primes. 
:::

::: {.callout-tip collapse="true"}
# Proof (optional)

Suppose, for the sake of contradiction, that there are only finitely many primes, say
$$
p_1, p_2, \dots, p_n.
$$
Consider the number
$$
N = p_1 p_2 \cdots p_n + 1.
$$
This number is greater than $1$ and not divisible by any of the $p_i$, since division by any $p_i$ leaves a remainder of $1$. Therefore, $N$ is prime itself, contradicting our assumption that there are only finitely many primes. 
:::
:::

Or we can use nested callout blocks to leave notes about a result. 

::: callout-note
::: {#thm-prime-number}
# Prime number theorem 
Let $\pi(x)$ denote the prime-counting function. Then
$$
\pi(x) \sim \frac{x}{\log x} \quad \text{as } x \to \infty,
$$
that is,
$$
\lim_{x \to \infty} \frac{\pi(x)}{x / \log x} = 1.
$$
Equivalently, using the logarithmic integral $\operatorname{Li}(x) = \int_2^x \frac{dt}{\log t}$, we have
$$
\pi(x) \sim \operatorname{Li}(x).
$$
In the language of asymptotic analysis,
$$
\pi(x) = \operatorname{Li}(x) + o\big(\operatorname{Li}(x)\big).
$$
:::

::: callout-warning
# TeX support 
This result shows that Quarto supports fairly complex TeX commands. 
:::

::: callout-important
# Hard! 
Proving this result is beyond the scope of this course. For interested readers, @zagier97 provides a proof of the result. 
:::
:::

The last nested callout block in the above shows that Quarto also allows us to cleanly reference external sources.

Briefly, we mention that we didn't have to use callout boxes. We can simply have definitions, examples, and theorems stand on their own:

::: {#def-definition}
# A definition 

This is a definition 

:::

::: {#thm-theorem}
# A theorem  
This is a theorem that we can state now that we have @def-definition.
:::

::: {#exm-example}
# An example 
This is an example that uses @thm-theorem.
:::

It's not as colorful, but it still gets the job done. 

## Functionality with R

Lastly, Quarto allows us to embed R cells that will run when the webpage is compiled. The below figure is a not a hand embedded image (although figures can also be hand embedded images if needed), but rather the result of code that is run during compilation time.

```{r}
#| label: fig-r
#| fig-cap: "Number of primes less than n"
#| echo: false
#| out.width: '60%'

is_prime <- function(n) {
  if (n < 2) return(FALSE)
  for (i in 2:floor(sqrt(n))) {
    if (n %% i == 0) return(FALSE)
  }
  return(TRUE)
}

n_vals <- 2:100
prime_counts <- sapply(n_vals, function(n) sum(sapply(2:n, is_prime)))

df <- data.frame(n = n_vals, count = prime_counts)

library(ggplot2)
ggplot(df, aes(x = n, y = count)) +
  geom_line(color = "steelblue") +
  labs(x = "n", y = expression("Number of primes " <= n))
```

Note that we can refer to @fig-r just as we were able to refer to definitions, examples, etc. The functionality is exactly the same, e.g., we can reference figures like @fig-smiley-face from different chapters. 

If we want, we can also expose the code that makes @fig-r to the reader. @fig-r-again below is the same plot as @fig-r, but unlike @fig-r, it is preceded by the code that creates it. This is controlled by whether we set "echo" to true (show the code) or false (don't show the code). 

```{r}
#| label: fig-r-again
#| fig-cap: "Number of primes less than n"
#| echo: true
#| out.width: '60%'

is_prime <- function(n) {
  if (n < 2) return(FALSE)
  for (i in 2:floor(sqrt(n))) {
    if (n %% i == 0) return(FALSE)
  }
  return(TRUE)
}

n_vals <- 2:100
prime_counts <- sapply(n_vals, function(n) sum(sapply(2:n, is_prime)))

df <- data.frame(n = n_vals, count = prime_counts)

library(ggplot2)
ggplot(df, aes(x = n, y = count)) +
  geom_line(color = "steelblue") +
  labs(x = "n", y = expression("Number of primes " <= n))
```

Inside these R cells, we can also write TikZ code that compiles into figures. @fig-prime below is a TikZ diagram that lists out the numbers from $1$ to $25$ and circles the prime ones in red. 

```{r, engine='tikz'}
#| label: fig-prime
#| fig.cap: "Numbers from 1 to 25 with primes circled in red"
#| echo: false
#| out.width: '60%'
#| fig.align: 'center'

\begin{tikzpicture}[x=1cm, y=1cm]
  % Define prime numbers from 1 to 25
  \def\primes{2,3,5,7,11,13,17,19,23}

  % Draw numbers in a 5x5 grid
  \foreach \n in {1,...,25} {
    \pgfmathtruncatemacro{\row}{int(6 - ceil(\n/5))}  % row index (top to bottom)
    \pgfmathtruncatemacro{\col}{int(mod(\n-1,5))}      % column index (left to right)
    \node at (\col, \row) {\n};

    % If number is prime, draw red circle around it
    \foreach \p in \primes {
      \ifnum\n=\p
        \draw[red, thick] (\col, \row) circle (0.4cm);
      \fi
    }
  }
\end{tikzpicture}
```

Again, if we wanted, we could expose the TikZ code that generates @fig-prime to the reader. 

Perhaps, the most exciting feature is WebR, which allows us to put R cells that the reader can themselves run and edit. We use WebR in @exm-counting-primes below. 

::: callout-warning
::: {#exm-counting-primes}
# How many primes?

How many primes are there that are less than or equal to $n$? 

The below code snippet counts the number of primes that are less than or equal to $n=50$. By changing $n$ and rerunning the code, you can get an idea of how the answer changes as a function of $n$.

```{webr}
n <- 50  # Try changing this number to 100, 200, etc.

is_prime <- function(k) {
  if (k < 2) return(FALSE)
  for (i in 2:floor(sqrt(k))) {
    if (k %% i == 0) return(FALSE)
  }
  return(TRUE)
}

primes <- Filter(is_prime, 2:(n-1))
cat("There are", length(primes), "primes less than", n, "\n")
```

You can also run the below code snippet to plot the number of primes that are less than or equal to $n$, for all $n$ between $1$ and $N=100$. For comparison, the code snippet also plots $f(n)= n/(n\log n)$. Change $N$ and rerun the code to see how the two curves compare for larger and larger inputs. 

```{webr}
N <- 100  # Try changing this number to 200, 300, etc.

is_prime <- function(k) {
  if (k < 2) return(FALSE)
  for (i in 2:floor(sqrt(k))) {
    if (k %% i == 0) return(FALSE)
  }
  return(TRUE)
}

prime_counts <- sapply(1:N, function(n) sum(sapply(2:n, is_prime)))

# Theoretical n / log(n) curve
theoretical_counts <- sapply(1:N, function(n) floor(n / log(n)))

plot(1:N, prime_counts, type = "l", col = "steelblue", lwd = 2,
     xlab = "n", ylab = "Number of primes ≤ n",
     main = paste("Number of primes ≤ n for n = 1 to", N))
lines(1:N, theoretical_counts, col = "red", lwd = 2, lty = 2)  # Add theoretical curve
legend("topright", legend = c("Actual primes", "Theoretical n/log(n)"), 
       col = c("steelblue", "red"), lwd = 2, lty = c(1, 2))
```

The above code is highly inefficient. Can you see why? Modify it so that you can make the plot much more quickly for large values of $N$. 
:::
:::